spring:
  application:
    name: notification-service
  datasource:
    url: ${NOTIFICATION_DB_URL}
    username: ${NOTIFICATION_DB_USER}
    password: ${NOTIFICATION_DB_PASSWORD}
    driver-class-name: org.postgresql.Driver

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true
        format_sql: true
    open-in-view: false

  data:
    redis:
      host: localhost
      port: 6379

  kafka:
    bootstrap-servers: 127.0.0.1:20094,127.0.0.1:20095,127.0.0.1:20096
    properties:
      schema.registry.url: http://localhost:28081
      retry:
        enable: true
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
    consumer:
      group-id: notification-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        specific.avro.reader: true
    listener:
      try:
        topic:
          enabled: true

eureka:
  client:
    service-url:
      defaultZone: http://localhost:19090/eureka/

server:
  port: 19098

sns:
  topic:
    arn: ${SNS_TOPIC_ARN}

aws:
  accessKey: ${AWS_ACCESS_KEY}
  secretKey: ${AWS_SECRET_KEY}
  region: ap-northeast-2

cloud:
  aws:
    region:
      static: ap-northeast-2
    stack:
      auto: false

management:
  endpoints:
    web:
      exposure:
        include: health, metrics, prometheus
  prometheus:
    metrics:
      export:
        enabled: true
  endpoint:
    health:
      show-details: always