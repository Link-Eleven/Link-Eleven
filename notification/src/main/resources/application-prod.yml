spring:
  application:
    name: notification-service
  datasource:
    url: ${NOTIFICATION_DB_URL}
    username: ${NOTIFICATION_DB_USER}
    password: ${NOTIFICATION_DB_PASSWORD}
    driver-class-name: org.postgresql.Driver

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true
        format_sql: true
    open-in-view: false

  kafka:
    bootstrap-servers: ${BOOTSTRAP_SERVER}
    properties:
      schema.registry.url: ${SCHEMA_REGISTRY_URL}
      retry:
        enable: true
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
    consumer:
      group-id: ${NOTIFICATION_GROUP_ID}
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        specific.avro.reader: true
    listener:
      try:
        topic:
          enabled: true

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}

eureka:
  client:
    service-url:
      defaultZone: ${SERVER_URL}

server:
  port: 19098
