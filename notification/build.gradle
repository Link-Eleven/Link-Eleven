plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.link-eleven.msa'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://packages.confluent.io/maven/' }
}

ext {
	set('springCloudVersion', "2024.0.0")
}

dependencies {
	// JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// PostgreSQL
	runtimeOnly 'org.postgresql:postgresql'

	// TSID
	implementation 'io.hypersistence:hypersistence-utils-hibernate-63:3.7.5'

	// Spring Cloud
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	// Web, Lombok, Test
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// kafka & Related Dependency
	implementation 'org.springframework.kafka:spring-kafka'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	implementation 'io.confluent:kafka-avro-serializer:7.8.0'
	implementation 'org.springframework.retry:spring-retry'

	// avro schema
	configurations {
		avroTools
	}
	avroTools 'org.apache.avro:avro-tools:1.12.0'

	// aws sns
	implementation 'software.amazon.awssdk:sns'
	implementation platform('software.amazon.awssdk:bom:2.5.29')
	compileOnly group: 'org.springframework.cloud', name: 'spring-cloud-aws-messaging', version: '2.2.1.RELEASE'
	compileOnly group: 'org.springframework.cloud', name: 'spring-cloud-aws-autoconfigure', version: '2.2.1.RELEASE'

	// prometheus
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	// loki
	implementation 'com.github.loki4j:loki-logback-appender:1.5.1'

}
sourceSets {
	main {
		java {
			srcDirs += "build/generated/avro-java"
		}
	}
}
tasks.register("downloadAvroSchemas") {
	group = "avro"
	description = "Download Avro schemas from Schema Registry"

	doLast {
		def schemaRegistryUrl = "http://localhost:28081"
		def subjects = ['comment-events-value', 'reply-events-value', 'like-events-value']
		def outputDir = file("src/main/resources/avro")

		if (!outputDir.exists()) {
			outputDir.mkdirs()
		}

		subjects.each { subject ->
			def schemaFile = new File(outputDir, "${subject}.avsc")
			def schemaUrl = "${schemaRegistryUrl}/subjects/${subject}/versions/latest"

			println "Downloading schema for $subject from $schemaUrl"
			def schemaToJson = new URL(schemaUrl).text
			def parsedSchema = new groovy.json.JsonSlurper().parseText(schemaToJson)

			// JSON 데이터에서 "schema" 필드만 추출
			if (parsedSchema.containsKey("schema")) {
				def avroSchema = parsedSchema['schema']
				schemaFile.text = avroSchema // JSON 문자열로 저장
			} else {
				throw new RuntimeException("Schema field not found in response for $subject")
			}
		}

		println "Schemas downloaded to ${outputDir.absolutePath}"
	}
}


// Generate Avro Java classes
tasks.register("generateAvroJava", JavaExec) {
	group = "build"
	description = "Compiles Avro schemas into Java classes"

	// Ensure schemas are downloaded before generating Java classes
	dependsOn("downloadAvroSchemas")

	mainClass.set("org.apache.avro.tool.Main")
	classpath = configurations.avroTools

	args = [
			"compile", "-string", "schema",
			"src/main/resources/avro", // 다운로드 스키마 위치
			"build/generated/avro-java" // 스키마 자바클래스 생성 위치
	]
}
dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
